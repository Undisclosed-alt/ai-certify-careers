services:
  # ────────────────────────────────────────────────
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB:       ${POSTGRES_DB:-careers}
      POSTGRES_USER:     ${POSTGRES_USER:-careers_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-careers_pass}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  # ────────────────────────────────────────────────
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.backend        # ← correct relative path
    command: python -m uvicorn backend.app.main:app --host 0.0.0.0 --port 8000
    environment:
      - DATABASE_URL=postgres+asyncpg://${POSTGRES_USER:-careers_user}:${POSTGRES_PASSWORD:-careers_pass}@db:5432/${POSTGRES_DB:-careers}
      - PYTHONPATH=/code
    volumes:
      - ./:/code
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"

  # ────────────────────────────────────────────────
  worker:
    build:                         # reuse the same image layers as backend
      context: .
      dockerfile: backend/Dockerfile.backend
    command: python -m backend.app.worker
    environment:
      - DATABASE_URL=postgres+asyncpg://${POSTGRES_USER:-careers_user}:${POSTGRES_PASSWORD:-careers_pass}@db:5432/${POSTGRES_DB:-careers}
      - PYTHONPATH=/code
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  # ────────────────────────────────────────────────
  adminer:
    image: adminer:latest
    restart: unless-stopped
    depends_on:
      db:
        condition: service_started
    ports:
      - "8080:8080"

volumes:
  db_data:
